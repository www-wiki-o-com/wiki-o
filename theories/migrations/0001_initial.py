# Generated by Django 2.1.3 on 2019-02-21 20:49

from django.db import migrations, models
import django.db.models.deletion
import theories.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('slug', models.SlugField()),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'db_table': 'theories_category',
                'verbose_name': 'Category',
            },
        ),
        migrations.CreateModel(
            name='Opinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateField(auto_now_add=True)),
                ('modified_date', models.DateField(auto_now=True)),
                ('anonymous', models.BooleanField(default=False)),
                ('force', models.BooleanField(default=False)),
                ('true_input', models.SmallIntegerField(default=0)),
                ('false_input', models.SmallIntegerField(default=0)),
                ('true_total', models.SmallIntegerField(default=0)),
                ('false_total', models.SmallIntegerField(default=0)),
                ('rank', models.SmallIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Opinions',
                'db_table': 'theories_opinion',
                'ordering': ['-rank'],
                'verbose_name': 'Opinion',
            },
            bases=(theories.models.TheoryPointerBase, models.Model),
        ),
        migrations.CreateModel(
            name='OpinionNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tt_input', models.SmallIntegerField(default=0)),
                ('tf_input', models.SmallIntegerField(default=0)),
                ('ft_input', models.SmallIntegerField(default=0)),
                ('ff_input', models.SmallIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Opinion Nodes',
                'db_table': 'theories_opinion_node',
                'verbose_name': 'Opinion Node',
            },
            bases=(theories.models.NodePointerBase, models.Model),
        ),
        migrations.CreateModel(
            name='Stats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stats_type', models.SmallIntegerField(choices=[(0, 'All'), (1, 'Supporters'), (2, 'Moderates'), (3, 'Opposers')])),
                ('total_true_points', models.FloatField(default=0.0)),
                ('total_false_points', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name_plural': 'Stats',
                'db_table': 'theories_stats',
                'verbose_name': 'Stats',
            },
            bases=(theories.models.TheoryPointerBase, models.Model),
        ),
        migrations.CreateModel(
            name='StatsFlatNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_true_points', models.FloatField(default=0.0)),
                ('total_false_points', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name_plural': 'Stats Flat Nodes',
                'db_table': 'theories_stats_flat_node',
                'verbose_name': 'Stats Flat Node',
            },
            bases=(theories.models.NodePointerBase, models.Model),
        ),
        migrations.CreateModel(
            name='StatsNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_true_points', models.FloatField(default=0.0)),
                ('total_false_points', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name_plural': 'Stats Node',
                'db_table': 'theories_stats_node',
                'verbose_name': 'Stats Node',
            },
            bases=(theories.models.NodePointerBase, models.Model),
        ),
        migrations.CreateModel(
            name='TheoryNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_type', models.SmallIntegerField(choices=[(10, 'Theory'), (20, 'Evidence (other)'), (21, 'Evidence (fact)'), (-10, 'Deleted Theory'), (-20, 'Deleted Evidence (other)'), (-21, 'Deleted Evidence (fact)')])),
                ('title00', models.CharField(blank=True, max_length=255, null=True)),
                ('title01', models.CharField(max_length=255, unique=True)),
                ('details', models.TextField(blank=True, max_length=10000)),
                ('pub_date', models.DateField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(blank=True, null=True, verbose_name=django.db.models.deletion.SET_NULL)),
                ('rank', models.SmallIntegerField(default=0)),
                ('categories', models.ManyToManyField(blank=True, related_name='theories', to='theories.Category')),
            ],
            options={
                'verbose_name_plural': 'Theory Nodes',
                'db_table': 'theories_theory_node',
                'permissions': (('report', 'Can report.'), ('add_edge', 'Can add theory nodes links.'), ('swap_title', 'Can swap true/false title.'), ('delete_edge', 'Can delete theory nodes lines.'), ('change_title', 'Can change title.'), ('change_details', 'Can change details.'), ('delete_reversion', 'Can delete revision.'), ('merge_theorynode', 'Can merge nodes.'), ('backup_theorynode', 'Can create backup.'), ('restore_theorynode', 'Can restore/revert from revision.'), ('convert_theorynode', 'Can convert theory <=> evidence.')),
                'ordering': ['-rank'],
                'verbose_name': 'Theory Node',
            },
        ),
    ]
