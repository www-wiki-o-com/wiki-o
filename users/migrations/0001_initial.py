# Generated by Django 2.2.10 on 2020-03-22 14:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('theories', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sex', models.CharField(blank=True, max_length=60)),
                ('location', models.CharField(blank=True, max_length=60)),
                ('religion', models.CharField(blank=True, max_length=60)),
                ('politics', models.CharField(blank=True, max_length=60)),
                ('fullname', models.CharField(blank=True, max_length=60)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('hidden', models.BooleanField(default=False)),
                ('sex_visible', models.BooleanField(default=False)),
                ('location_visible', models.BooleanField(default=False)),
                ('religion_visible', models.BooleanField(default=False)),
                ('politics_visible', models.BooleanField(default=False)),
                ('fullname_visible', models.BooleanField(default=False)),
                ('birth_date_visible', models.BooleanField(default=False)),
                ('use_wizard', models.BooleanField(default=True)),
                ('contributions', models.ManyToManyField(blank=True, related_name='collaborators', to='theories.Content')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('utilized', models.ManyToManyField(blank=True, related_name='users', to='theories.Content')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Violation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(blank=True, null=True, verbose_name=django.db.models.deletion.SET_NULL)),
                ('close_date', models.DateTimeField(blank=True, null=True, verbose_name=django.db.models.deletion.SET_NULL)),
                ('object_id', models.PositiveIntegerField()),
                ('status', models.SmallIntegerField(choices=[(100, 'Pending'), (101, 'Polling'), (102, 'Pending'), (110, 'Ignored'), (120, 'Warning'), (130, 'Strike')], default=100)),
                ('read', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('offender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violations', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_violations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Violation',
                'verbose_name_plural': 'Violations',
                'db_table': 'users_violation',
                'ordering': ['-pub_date'],
                'permissions': (('can_vote_violation', 'Can vote.'), ('can_report_violation', 'Can report.'), ('can_comment_violation', 'Can comment.'), ('can_resolve_violation', 'Can resolve.')),
            },
        ),
        migrations.CreateModel(
            name='ViolationVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.SmallIntegerField(choices=[(0, '----'), (110, 'Ignore'), (120, 'Warn'), (130, 'Strike')], default=0)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='violation_votes', to=settings.AUTH_USER_MODEL)),
                ('violation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='users.Violation')),
            ],
            options={
                'verbose_name': 'Violation Vote',
                'verbose_name_plural': 'Violation Votes',
                'db_table': 'users_violation_vote',
            },
        ),
        migrations.CreateModel(
            name='ViolationFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(blank=True, max_length=750)),
                ('pub_date', models.DateTimeField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='violation_feedback', to=settings.AUTH_USER_MODEL)),
                ('violation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='users.Violation')),
            ],
            options={
                'verbose_name': 'Violation Feedback',
                'verbose_name_plural': 'Violation Feedback',
                'db_table': 'users_violation_feedback',
                'ordering': ['pub_date'],
            },
        ),
    ]
