# Generated by Django 2.1.3 on 2019-02-21 20:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('theories', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True,
                                                max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                                               max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True,
                                            max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),
                ('sex', models.CharField(blank=True, max_length=60)),
                ('location', models.CharField(blank=True, max_length=60)),
                ('religion', models.CharField(blank=True, max_length=60)),
                ('politics', models.CharField(blank=True, max_length=60)),
                ('fullname', models.CharField(blank=True, max_length=60)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('sex_visible', models.BooleanField(default=False)),
                ('location_visible', models.BooleanField(default=False)),
                ('religion_visible', models.BooleanField(default=False)),
                ('politics_visible', models.BooleanField(default=False)),
                ('fullname_visible', models.BooleanField(default=False)),
                ('birth_date_visible', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('use_wizard', models.BooleanField(default=True)),
                ('contributions', models.ManyToManyField(blank=True,
                                                         related_name='collaborators', to='theories.TheoryNode')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FeedbackContribution',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.SmallIntegerField(choices=[
                 (0, '----'), (10, 'Reported'), (14, 'Ignored'), (16, 'Accepted'), (18, 'Rejected')], default=0)),
                ('message', models.CharField(max_length=750)),
                ('timestamp', models.DateTimeField()),
            ],
            options={
                'verbose_name_plural': 'Feedback Contributions',
                'ordering': ['timestamp'],
                'db_table': 'users_feedback_contribution',
                'verbose_name': 'Feedback Contribution',
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('status', models.SmallIntegerField(choices=[(10, 'Pending'), (11, 'Pending'), (14, 'Ignored'), (15, 'Ignored'), (16, 'Accepted'), (17, 'Accepted'), (18, 'Rejected'), (19, 'Rejected'), (20, 'Nominated'), (21, 'Nominated'), (26, 'Accepted'), (27, 'Accepted'), (
                    28, 'Rejected'), (29, 'Rejected'), (30, 'Nominated'), (31, 'Nominated'), (36, 'Accepted'), (37, 'Accepted'), (38, 'Rejected'), (39, 'Rejected'), (40, 'Nominated'), (41, 'Nominated'), (46, 'Accepted'), (47, 'Accepted'), (48, 'Rejected'), (49, 'Rejected')])),
                ('pub_date', models.DateTimeField()),
                ('modified_date', models.DateTimeField()),
                ('theory_node', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, to='theories.TheoryNode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Feedback',
                'ordering': ['-pub_date'],
                'db_table': 'users_feedback',
                'verbose_name': 'Feedback',
            },
        ),
        migrations.AddField(
            model_name='feedbackcontribution',
            name='feedback',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='contributions', to='users.UserFeedback'),
        ),
        migrations.AddField(
            model_name='feedbackcontribution',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='feedback_contributions', to=settings.AUTH_USER_MODEL),
        ),
    ]
